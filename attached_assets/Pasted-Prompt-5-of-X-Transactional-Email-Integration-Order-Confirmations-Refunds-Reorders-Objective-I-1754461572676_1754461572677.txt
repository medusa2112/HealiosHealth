Prompt 5 of X: Transactional Email Integration ‚Äî Order Confirmations, Refunds, Reorders
Objective: Integrate a reliable, secure email service (Resend or Mailgun) to deliver key transactional emails and system alerts, triggered by actual Stripe/webhook or customer actions.

‚úÖ PHASE 1: SYSTEM SCAN (EMAIL-SPECIFIC CHECKS)
Scan the codebase for:

‚ùå Inline or test email logic:

Check for any nodemailer, sendgrid, or SMTP test stubs

Remove leftover email test calls

‚ùå Hardcoded email addresses:

Search for hardcoded "admin@..." or "test@..." values in source files

‚úÖ Environment Variables:

.env must include:

EMAIL_SERVICE=mailgun or resend

MAILGUN_API_KEY, MAILGUN_DOMAIN or

RESEND_API_KEY

No secrets hardcoded

‚úÖ Customer email field integrity:

Confirm users table includes email

Stripe webhook and order logic captures it

üîß PHASE 2: INSTALL + LIB INTEGRATION
Option A: Resend (Preferred for simplicity)
bash
Copy
Edit
npm install resend
Create /lib/email.ts:

ts
Copy
Edit
import { Resend } from "resend";
export const resend = new Resend(process.env.RESEND_API_KEY);

type EmailType = "order_confirm" | "refund" | "reorder";

export async function sendEmail(to: string, type: EmailType, data: any) {
  const subjectMap = {
    order_confirm: "Your Healios Order Confirmation",
    refund: "Your Healios Refund Has Been Processed",
    reorder: "Your Healios Reorder Is Complete",
  };

  const bodyMap = {
    order_confirm: `Thank you for your order. Your payment of $${data.amount} has been received.`,
    refund: `Your refund for $${data.amount} has been processed. It may take 5‚Äì10 days to appear.`,
    reorder: `Your reorder has been confirmed. You'll receive an update once shipped.`,
  };

  return resend.emails.send({
    from: "Healios <orders@thehealios.com>",
    to,
    subject: subjectMap[type],
    html: `<p>${bodyMap[type]}</p><p>Order ID: ${data.id}</p>`,
  });
}
üì¨ PHASE 3: EMAIL TRIGGERS IN CORE LOGIC
1. In /routes/stripe.ts webhook handler
a. After checkout.session.completed
ts
Copy
Edit
await sendEmail(session.customer_email!, "order_confirm", {
  amount: session.amount_total! / 100,
  id: session.id,
});
b. After charge.refunded
ts
Copy
Edit
await sendEmail(charge.billing_details.email!, "refund", {
  amount: charge.amount_refunded / 100,
  id: charge.payment_intent,
});
2. In /routes/portal.ts ‚Üí Reorder route
ts
Copy
Edit
await sendEmail(req.user.email, "reorder", {
  amount: total,
  id: newSession.id,
});
üîÅ PHASE 4: SANDBOX VALIDATION
‚úÖ Use Resend test mode or Mailgun sandbox domain:

Create .test email address in test user account (e.g. user+test@thehealios.com)

Trigger full checkout ‚Üí confirm email received

‚úÖ Confirm:

No duplicate emails on retries

Refund email sent only once

Reorder confirmation not triggered unless reorder logic completes

‚úÖ Admins can see errors (log failed email attempts to console or DB ‚Äî optional future prompt)

üß™ OPTIONAL: ADMIN ALERT EMAILS
Add alert logic to failed webhook auth or Stripe disputes:

ts
Copy
Edit
await sendEmail("admin@thehealios.com", "refund", {
  amount: 0,
  id: "‚ö†Ô∏è STRIPE DISPUTE DETECTED",
});
üõ°Ô∏è FAILOVER PLAN
If Resend API fails:

Retry via queue (future prompt)

Fallback: display user success message but warn in logs

Do not retry in frontend ‚Äî all sends should occur server-side only

üì¶ OUTPUT FROM THIS PROMPT
Transactional emails triggered for:

Order confirmations

Refunds

Reorders

Clean, reusable email sending utility in /lib/email.ts

No leaked secrets, test logic, or email failures visible to users