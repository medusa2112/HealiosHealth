You are Replit AI working inside the current Healios repo. Make minimal, non-breaking changes. Keep UK English.

0) Pre-flight (do this first)
Scan the codebase and detect:

Framework (Next.js pages/app), ORM (Drizzle/Prisma/raw), product schema/fields, admin edit API (PUT /api/admin/products/[slug]), products list API (GET /api/products), and storefront product card component(s).

Do not rename existing fields; if equivalent fields already exist, reuse them. Only add what’s missing.

1) Data layer (extend, don’t break)
Ensure the product entity has these fields (create migration only if missing):

stock_quantity: integer >= 0 (or map to existing stock field)

allow_preorder: boolean (default false)

preorder_cap: integer | null

preorder_count: integer (default 0)

Add lightweight constraints if your migration tool allows (non-negativity; if allow_preorder=true then preorder_cap must be set).

2) Shared logic (central, single source of truth)
Create/extend a small util (e.g. lib/availability.ts) and use it everywhere:

ts
Copy
Edit
export type ProductAvailability =
  | 'IN_STOCK'
  | 'OUT_OF_STOCK'
  | 'PREORDER_OPEN'
  | 'PREORDER_CLOSED_MAX_REACHED'; // maps to “Closed to pre-order (max reached)”

export function deriveAvailability(p: {
  stockQuantity: number;
  allowPreorder: boolean;
  preorderCap?: number | null;
  preorderCount: number;
}): ProductAvailability {
  if (p.stockQuantity > 0) return 'IN_STOCK';
  if (!p.allowPreorder) return 'OUT_OF_STOCK';
  if (p.preorderCap != null && p.preorderCount >= p.preorderCap)
    return 'PREORDER_CLOSED_MAX_REACHED';
  return 'PREORDER_OPEN';
}

export const isOrderable = (a: ProductAvailability) =>
  a === 'IN_STOCK' || a === 'PREORDER_OPEN';

export const availabilityRank = (a: ProductAvailability) =>
  a === 'IN_STOCK' ? 0 : a === 'PREORDER_OPEN' ? 1 : 2; // CLOSED/OUT go last
3) API: list + detail + admin save
GET /api/products: include availability (from deriveAvailability) and isOrderable. Sort on the server by availabilityRank (in-stock, then preorder-open, then the rest). Use your ORM’s sort or SQL CASE.

GET /api/admin/products/:id|slug: include all preorder fields + derived availability.

PUT /api/admin/products/:id|slug: accept and validate:

stockQuantity >= 0, allowPreorder: boolean, preorderCap: int >= 1 | null, (optional) preorderAutoClose: boolean.

If allowPreorder=true then preorderCap must be provided. Persist without renaming existing fields.

4) Admin UI (per-product controls)
In the existing product edit form:

Add fields:

Stock quantity (number, min 0)

Allow pre-order (checkbox)

Pre-order cap (number, min 1; shown/required only when allow = true)

Show Pre-orders taken (read-only preorderCount)

Show a Status badge using deriveAvailability:

IN_STOCK → “In stock”

PREORDER_OPEN → “Pre-order open”

PREORDER_CLOSED_MAX_REACHED → “Pre-order closed (max reached)”

OUT_OF_STOCK → “Out of stock”

Ensure the form payload matches the API in Step 3.

5) Storefront UI (grey-out + bottom ordering)
Wherever products are listed:

Use the server’s sorted response; if not available, apply availabilityRank client-side.

Grey-out cards when availability is OUT_OF_STOCK or PREORDER_CLOSED_MAX_REACHED by applying existing muted styles (opacity/grayscale) — do not invent a new design system.

Disable CTA when !isOrderable(availability).

Button copy:

IN_STOCK → “Add to cart”

PREORDER_OPEN → “Pre-order now”

PREORDER_CLOSED_MAX_REACHED → “Pre-order closed”

OUT_OF_STOCK → “Out of stock”

6) Order flow guard (minimal server enforcement)
In the existing “add to basket / create order item” server path, block when !isOrderable(deriveAvailability(p)).

If PREORDER_OPEN with a cap, increment preorder_count atomically (single SQL/ORM update with WHERE preorder_count < preorder_cap). If the write fails, return a 409 with a clear message and let the UI refresh.

7) Tests / checks (keep it quick)
Add/adjust unit tests for deriveAvailability.

Smoke test API:

set stock=0, allow_preorder=false → OUT_OF_STOCK, CTA disabled, card greyed, sorted last.

set stock=0, allow_preorder=true, cap=10, count=0..9 → PREORDER_OPEN, CTA = “Pre-order now”.

set stock=0, allow_preorder=true, cap=10, count=10 → PREORDER_CLOSED_MAX_REACHED, CTA disabled, card greyed, sorted last.

8) Deliverables
Minimal migration (only if fields missing).

Updated model/types, shared util, APIs, Admin form, Storefront UI.

No regressions to existing styling, CSRF, or routes.

Commit as feat: product availability + preorder (UI+API).

Now run the changes, fix any type errors, and open a PR with a short README note explaining the availability rules.







Ask ChatGPT
