Prompt 14 of X: Product Variant Support (SKUs for Size, Flavour, Bundles)
Objective: Upgrade the product model and admin/product UI to support structured variants, like “Magnesium (60 caps | 90 caps)”, “Protein (Vanilla | Chocolate)”, or bundled items (e.g. "Sleep Stack").

✅ PHASE 1: SYSTEM SCAN (MODEL CONFLICT CHECK)
Before applying changes:

❌ Hardcoded SKUs in product name or description

e.g. "Magnesium - 60 caps" should be split into product + variant

❌ products table trying to store multiple variants in one row

If product.variants = [{ name: ..., price: ... }] exists as JSON — replace this

✅ order_items model should support:

Variant reference

Unit price

🧱 PHASE 2: DATABASE RESTRUCTURE
1. Create product_variants table in /db/schema.ts
ts
Copy
Edit
export const product_variants = pgTable("product_variants", {
  id: uuid("id").defaultRandom().primaryKey(),
  product_id: uuid("product_id").notNull().references(() => products.id),
  name: varchar("name", { length: 128 }).notNull(), // e.g. “60 Caps”, “Vanilla”
  price: numeric("price", { precision: 10, scale: 2 }).notNull(),
  sku: varchar("sku", { length: 64 }).notNull().unique(),
  image_url: text("image_url"), // optional override
});
Update order_items:

ts
Copy
Edit
product_variant_id: uuid("product_variant_id").references(() => product_variants.id),
Update all routes that use order_items.product_id to now reference the variant ID instead.

Run migration:

bash
Copy
Edit
npx drizzle-kit push
🛠️ PHASE 3: ADMIN PRODUCT VARIANT CRUD UI
In /admin/products.tsx, add embedded variant manager:

tsx
Copy
Edit
const [variants, setVariants] = useState([{ name: "", price: "", sku: "" }]);

const handleVariantChange = (index: number, field: string, value: string) => {
  const updated = [...variants];
  updated[index][field] = value;
  setVariants(updated);
};

const addVariantField = () => setVariants([...variants, { name: "", price: "", sku: "" }]);

...

<h3 className="text-md font-semibold">Variants</h3>
{variants.map((v, i) => (
  <div key={i} className="grid grid-cols-3 gap-2 mb-2">
    <input value={v.name} placeholder="e.g. 60 Caps" onChange={e => handleVariantChange(i, "name", e.target.value)} className="input" />
    <input value={v.price} placeholder="Price" type="number" step="0.01" onChange={e => handleVariantChange(i, "price", e.target.value)} className="input" />
    <input value={v.sku} placeholder="SKU" onChange={e => handleVariantChange(i, "sku", e.target.value)} className="input" />
  </div>
))}
<button type="button" onClick={addVariantField} className="btn btn-secondary">+ Add Variant</button>
On submit:

Create product

Then bulk insert product_variants with product_id = newProduct.id

Backend route:

ts
Copy
Edit
await db.insert(products).values(...).returning();
await db.insert(product_variants).values([
  { product_id, name: ..., price: ..., sku: ... },
  ...
]);
💳 PHASE 4: PRODUCT PAGE + CART UPGRADE
1. Fetch product + its variants on detail page
ts
Copy
Edit
const res = await fetch(`/products/${productId}`);
const product = await res.json(); // includes variants[]
2. Display variant selector:
tsx
Copy
Edit
<select onChange={(e) => setSelectedVariant(e.target.value)}>
  {product.variants.map(v => (
    <option value={v.id}>{v.name} - ${v.price}</option>
  ))}
</select>
Pass variant_id to cart logic and use it in checkout.

📦 PHASE 5: ORDER LOGIC UPGRADE
Update cart and order logic to store:

product_variant_id

unit_price from the variant

Not the main product

This ensures:

Reorders pull correct variant

Pricing is always traceable

Analytics remains accurate

🧪 PHASE 6: INTEGRITY TESTS
Scenario	Expected Result
Product with no variants	❌ Invalid (admin prevented)
Add variant with duplicate SKU	❌ DB constraint blocks
Reorder from past order with variant	✅ Same variant session
Cart with variant → Stripe	✅ Pricing from variant, not product
Variant image override	✅ Optional support (future prompt)

📦 OUTPUT FROM THIS PROMPT
✅ product_variants table (1:n with products)

✅ Admin UI for managing multiple variants per product

✅ Frontend selector and cart logic tied to variants

✅ Order + reorder system updated to store correct SKU and unit price

✅ System now supports size, flavour, bundles, etc.