You are acting as a forensic system auditor. Your task is to output a full structured report of everything present, connected, and configured in this Replit project for the Healios platform. 

Provide your output in the following sections:

1. **Frontend**  
   - Frameworks and libraries in use (React, Next.js, Preline UI, Tailwind, etc.).  
   - Page structure, routes, and current components.  
   - Theme and design system rules (fonts, colours, responsiveness).  
   - Any third-party integrations (icons, analytics, etc.).  

2. **Backend**  
   - Language, frameworks (FastAPI, Express, etc.).  
   - API endpoints and logic.  
   - Authentication and session handling.  
   - Any business rules or workflows implemented.  

3. **Database**  
   - Type of DB (Postgres, Drizzle ORM, etc.).  
   - Schema, migrations, seed data, and current tables.  
   - Security configurations (row-level security, access patterns).  

4. **Infrastructure & Deployment**  
   - Current deployment setup inside Replit.  
   - Any references to Azure, Resend, or external services.  
   - CI/CD pipelines, rollback logic, or environment configs.  
   - Secrets management approach.  

5. **Security & Compliance**  
   - Where authentication/authorisation is implemented.  
   - Encryption (at rest, in transit).  
   - Logging, monitoring, or audit trails present.  
   - Compliance-relevant notes (GDPR, HIPAA, SOC 2 baseline).  

6. **Testing & QA**  
   - Testing frameworks in use (unit, integration, regression).  
   - Current test coverage or stubs.  
   - Weak points or missing QA logic.  

7. **Known Risks or Gaps**  
   - Scalability concerns.  
   - Authentication blind spots.  
   - Incomplete or hardcoded logic.  
   - Dependencies without security validation.  

8. **Governance & Documentation**  
   - Inline code comments, README, or developer notes.  
   - Evidence of project documentation or architecture diagrams.  
   - Onboarding guidance (or lack thereof).  

**Important**: 
- List every file, config, or dependency that touches these areas.  
- Do not summarise vaguely â€” provide explicit file names, dependency versions, and code references.  
- Where information is missing or incomplete, flag it as a **Risk Zone**.  
- Output must be exhaustive and structured to support creation of a full Healios Project Purpose & Prompt Framework (like the Mitig8 template). 
