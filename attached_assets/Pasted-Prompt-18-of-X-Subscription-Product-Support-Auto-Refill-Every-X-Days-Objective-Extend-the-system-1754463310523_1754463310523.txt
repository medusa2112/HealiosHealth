Prompt 18 of X: Subscription Product Support (Auto-Refill Every X Days)
Objective: Extend the system to support recurring subscription products (e.g. Magnesium every 30 days). Integrate Stripe’s native subscription APIs, admin controls, and user cancellation workflows.

✅ PHASE 1: STRIPE SUBSCRIPTIONS — KEY DIFFERENCE FROM CHECKOUT SESSIONS
Flow	One-Time	Subscription
Stripe Object	checkout.session	subscription
Payment Trigger	payment_intent	invoice → payment_intent
Webhooks	checkout.session.completed	invoice.paid, customer.subscription.created, etc.
UI Element	“Buy Now”	“Subscribe (30-day refill)”

🧱 PHASE 2: DATABASE SCHEMA — SUBSCRIPTION METADATA
Add subscriptions table:
ts
Copy
Edit
export const subscriptions = pgTable("subscriptions", {
  id: uuid("id").defaultRandom().primaryKey(),
  user_id: uuid("user_id").references(() => users.id),
  product_variant_id: uuid("product_variant_id").references(() => product_variants.id),
  stripe_subscription_id: varchar("stripe_subscription_id", { length: 128 }).notNull(),
  status: varchar("status", { length: 32 }).default("active"), // active, canceled, paused
  interval_days: integer("interval_days").notNull(), // e.g. 30
  start_date: timestamp("start_date").defaultNow(),
  cancel_at: timestamp("cancel_at"),
});
Run:

bash
Copy
Edit
npx drizzle-kit push
⚙️ PHASE 3: STRIPE SUBSCRIPTION CREATION FLOW
1. Admin creates Stripe Product + Price in dashboard:
Product: “Magnesium Refill”

Price: $20 every 30 days

Price ID (e.g. price_abc123) must be stored in product_variants.subscription_price_id

2. Add subscription logic to checkout trigger:
ts
Copy
Edit
if (req.body.subscription) {
  const session = await stripe.checkout.sessions.create({
    mode: "subscription",
    line_items: [{
      price: variant.subscription_price_id,
      quantity: 1,
    }],
    success_url: "...",
    cancel_url: "...",
    metadata: {
      user_id: user.id,
      variant_id: variant.id,
    }
  });
  return res.json({ url: session.url });
}
🧠 PHASE 4: STRIPE WEBHOOK HANDLING
Update /stripe/webhook.ts to handle:

a. customer.subscription.created
ts
Copy
Edit
if (event.type === "customer.subscription.created") {
  const sub = event.data.object as Stripe.Subscription;

  await db.insert(subscriptions).values({
    user_id: sub.metadata.user_id,
    product_variant_id: sub.metadata.variant_id,
    stripe_subscription_id: sub.id,
    interval_days: 30, // fixed for now
  });
}
b. invoice.payment_failed
→ Optional: notify customer or flag subscriptions.status = "paused"

💻 PHASE 5: CUSTOMER PORTAL — SUBSCRIPTION MANAGEMENT
In /portal:

tsx
Copy
Edit
<h2>My Subscriptions</h2>
{subscriptions.map(sub => (
  <div key={sub.id}>
    <div>{sub.variant_name} — Every {sub.interval_days} days</div>
    <div>Status: {sub.status}</div>
    {sub.status === "active" && (
      <button onClick={() => cancelSub(sub.id)}>Cancel</button>
    )}
  </div>
))}
🔁 Cancel logic: /portal/subscriptions/:id/cancel
ts
Copy
Edit
await stripe.subscriptions.update(stripeSubId, { cancel_at_period_end: true });
await db.update(subscriptions).set({
  status: "canceled",
  cancel_at: new Date(),
}).where(eq(subscriptions.id, req.params.id));
📦 Optional: Admin Subscription Dashboard
/admin/subscriptions

View all live subs, churned customers, upcoming invoices

🧪 PHASE 6: TEST CASES
Case	Outcome
User buys Magnesium subscription	✅ Tracked as subscription, not order
User cancels sub	✅ Status updated, cancel_at set
Stripe invoice fails	✅ Flagged for follow-up
Guest tries to subscribe	❌ Blocked (must login)
Admin deletes variant	✅ Block editing if in live subscription

📦 OUTPUT FROM THIS PROMPT
Stripe-powered subscriptions linked to product_variants

/subscriptions table storing lifecycle info

Webhook-driven creation + status update

Customer portal includes cancel button + status view

Compliant, scalable refill product flow