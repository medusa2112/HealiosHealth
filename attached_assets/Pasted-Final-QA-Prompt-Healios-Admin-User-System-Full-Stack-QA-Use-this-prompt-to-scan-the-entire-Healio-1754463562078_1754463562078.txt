Final QA Prompt: Healios Admin + User System Full Stack QA
Use this prompt to scan the entire Healios ecommerce codebase before deployment.
It validates routing, UI logic, admin workflows, Stripe integrity, database links, and system triggers across all new features (Prompts 1–21).
The goal is to catch broken flows, unlinked logic, insecure endpoints, or stale frontend code.

🧠 INPUT INSTRUCTIONS FOR GPT QA ENGINE (DEV ENVIRONMENT)
plaintext
Copy
Edit
You are a QA and DevOps specialist.  
Scan the entire Replit codebase (both frontend and backend) for the Healios ecommerce + admin system.  
Check for the following:

==============================
🔒 AUTH & SECURITY CHECKS
==============================
1. All **admin routes** are locked behind Replit Auth with role = 'admin'
2. All **user routes** validate login before exposing private data (orders, addresses, support tickets)
3. Stripe webhooks are validated with secret and NOT publicly exposed
4. Abandoned cart and reorder jobs cannot be triggered manually via open GET/POST endpoints
5. Referral logic cannot be abused via self-referral or fake accounts
6. AI assistant is sandboxed to session data — cannot leak data from other users
7. No hardcoded admin emails, secrets, Stripe keys in frontend or server files

==============================
🧩 FRONTEND ROUTES & SCREENS
==============================
1. ✅ `/portal` shows correct tabs: Orders, Addresses, Subscriptions, Support
2. ✅ `/admin` dashboard shows: Product Management, Orders, Subscriptions, Discounts, Tickets
3. ✅ `/admin/products` allows full create/update/delete of products and images
4. ✅ `/checkout` accepts discount codes, referral codes, and subscription selection
5. ✅ `/thank-you` page reflects correct Stripe response and triggers order insert
6. ✅ `/portal/referrals` shows code, link, usage count
7. ✅ `/portal/support` allows support ticket submission and shows prior chats
8. ✅ Floating chat assistant launches and returns correct info based on scope

==============================
🧱 BACKEND API ROUTES & LOGIC
==============================
1. 🧠 `POST /checkout` handles:
   - Stripe checkout session for one-time AND subscription modes
   - Discounts, referral codes, metadata tagging
2. 🧠 Stripe Webhooks:
   - `checkout.session.completed`: creates order OR subscription
   - `invoice.payment_failed`: flags subscription
   - `customer.subscription.created`: stores sub record
3. 🧠 `POST /admin/products` fully syncs to `product_variants`, `images`, `inventory`
4. 🧠 `POST /admin/discounts` saves code to database with correct rules
5. 🧠 `POST /admin/bundles` only allows eligible (non-children) variants to be grouped
6. 🧠 Daily cron jobs are isolated, deduplicated via `email_events`, and respect user status

==============================
📩 EMAIL + AI INTEGRATION
==============================
1. ✅ `sendEmail()` is used for all:
   - Order confirmations
   - Reorder reminders
   - Abandoned cart emails
   - Referral reward notifications
2. ✅ AI assistant routes questions correctly:
   - Order status → orders table
   - Returns → support ticket
   - FAQs → structured match
   - Disallowed queries → "I can't answer that"
3. ✅ All chatbot responses include fallback when unsure
4. ✅ No AI suggestions contain speculative medical claims

==============================
🧪 TEST DATA SETS (MINIMUM)
==============================
- At least 3 products with variants (one subscription-enabled)
- 2 discount codes (1 fixed, 1 % off)
- 1 bundle
- 1 admin user, 2 normal users
- 1 referral code issued + claimed
- 1 subscription active
- 1 AI chat interaction saved
- 1 support ticket in progress

==============================
📦 FINAL VERIFICATION
==============================
- All console logs removed or behind `NODE_ENV === "development"`
- No leftover dummy/test products
- All routes correctly return status codes (200, 401, 403, 500)
- Database schema is up to date with Drizzle migration
- All `.env` values are injected via Key Vault (in production)
✅ EXECUTION OPTIONS
You can run this QA prompt via:

Method	Tool
✅ Manual Run	Paste into GPT-4 in dev chat with full access
✅ Automated	Wrap into Alfr3d diagnostic suite
✅ DevOps pipeline	Trigger via npm run test:full-stack with mocks
✅ CI Audit	Hook into GitHub Actions before deploy

🔒 STRATEGIC SAFETY
🔐 Prevents accidental auth bypass

🔗 Verifies end-to-end flows

🧱 Protects against dead UI or orphaned backend routes

🚫 Blocks silent Stripe failures