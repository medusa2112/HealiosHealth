You are a senior auth engineer. Issue: The password reset email still links to the OLD reset page.

PHASE A — CHECK FIRST (read-only)
A1. Locate link builders and templates
- Search server + templates for reset link construction:
  - files likely: server/routes/auth.ts, server/services/email/*.ts, server/lib/mail.ts, templates/reset*.tsx|mjml
  - grep for: "reset", "verify-reset", "reset-password", "SITE_URL", "PUBLIC_URL", "REPLIT", "link", "token"
- Output the exact code that builds the URL (file:line) and the resulting path/host it uses.

A2. Environment & host
- Print effective values (without secrets): SITE_URL, PUBLIC_URL, BASE_URL, FRONTEND_RESET_PATH (or equivalent).
- Note if any point to a Replit preview or old domain/path.

A3. Frontend route
- Confirm the **current** reset route exists and renders (e.g. /reset or /auth/reset).
- Output file:line where the route is declared (React Router/Next/Wouter).

A4. Token format
- Confirm backend expects reset via: 
  a) link with token param: /reset?token=...&email=... OR
  b) code entry (6‑digit) at /verify-reset
- Show file:line that parses token/code on the server.

A5. Report
- Summary (≤6 bullets)
- Findings Table [ID | Area | Evidence (file:line) | Current value/route]
- Minimal Fix Plan (no code yet)

STOP if blockers (e.g., no reset route).
────────────────────────────────────────
PHASE B — APPLY MINIMAL FIXES
B1. Canonical URL builder
- Create/ensure a single helper `buildFrontendUrl(path, params)` that uses:
  const ORIGIN = process.env.SITE_URL ?? window.location.origin;
  return new URL(path + '?' + new URLSearchParams(params), ORIGIN).toString();
- Replace any hard‑coded reset links with:
  buildFrontendUrl(process.env.FRONTEND_RESET_PATH || '/reset', { email, token })

B2. Email template
- Update the reset email to use ONLY the canonical helper above.
- Copy: “Use this link to reset your password. It expires in 15 minutes.” 
- Ensure the link is HTTPS on the production domain.

B3. Backward‑compatible server redirect
- Add an Express mapper so legacy links keep working:
  // legacy → new
  app.get(['/reset-password', '/auth/reset-password'], (req,res) => {
    const q = new URLSearchParams(req.query as any).toString();
    res.redirect(301, `/reset${q ? `?${q}` : ''}`);
  });

B4. Env hygiene
- Set in secrets manager (no source control):
  SITE_URL = https://thehealios.com
  FRONTEND_RESET_PATH = /reset
- Remove/ignore any old REPLIT preview hosts from link generation.

Do NOT change token semantics, CSRF, or cookie settings.

────────────────────────────────────────
PHASE C — VERIFICATION (evidence required)
C1. Trigger forgot password
- POST /api/auth/forgot for qa+reset@healios.test
- Capture the generated email (log or provider preview); paste the exact reset URL.

C2. Link correctness
- Show that the host is the production domain and the path is the new route (/reset).
- Click the link (or curl -I); expect 200 HTML of the SPA reset page (not a 404, not old page).

C3. Legacy link safety
- Hit an old link form (e.g., /reset-password?token=...): expect 301 → /reset?token=...
- Paste the Location header.

C4. End‑to‑end
- Complete a reset using the new screen. 
- Old password fails; new password succeeds; Set‑Cookie shows Secure/HttpOnly/SameSite.

Output:
1) Summary
2) Findings Table (with file:line diffs where changed)
3) Email body snippet (redacted) showing the NEW link
4) curl/headers showing 301 for legacy paths and 200 on /reset
5) Go/No‑Go
