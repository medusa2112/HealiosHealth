You are a senior QA lead. Perform Stage 7 – Verification & Final Audit for Healios Health.

Stack context (do not re‑infer):
- React + TypeScript frontend, Express backend, PostgreSQL (Drizzle)
- Domain: https://thehealios.com (robots/sitemap/breadcrumbs already fixed)
- Stage 6 patches applied: CORS, bcrypt hashing, CSRF, hardened sessions, CSP, cookie consent, etc.

RULES
- Read/write allowed only for creating ephemeral test data; no code edits.
- Evidence over opinion: include exact CLI output snippets, headers, URLs, and where applicable file:line references.
- Output format at the end: 
  1) Summary [≤6 bullets]
  2) Findings Table [ID | Severity | Area | Evidence | Impact | Confidence%]
  3) Residual Risks
  4) Go/No‑Go recommendation

SEVERITIES: Critical, High, Medium, Low.

────────────────────────────────────────────────────────────────────
A) SECURITY REGRESSION

A1. Password hashing
- Create a disposable user; verify bcrypt/argon2 is being used (hash prefix/salt rounds).
- Attempt wrong password; expect 401/403 and no user enumeration.
- Evidence:
  - curl:
    curl -s -X POST "$BASE/api/auth/register" -H "Content-Type: application/json" \
      -d '{"email":"qa+stage7@healios.test","password":"S7ecure!234"}' -i | head -20
    curl -s -X POST "$BASE/api/auth/login" -H "Content-Type: application/json" \
      -d '{"email":"qa+stage7@healios.test","password":"Wrong!234"}' -i | head -20
  - Show server log snippet redacted of PII proving bcrypt compare path executed.

A2. CSRF
- Fetch token:
  curl -s "$BASE/api/csrf/token"
- Attempt POST to a mutating route without token → expect 401/403.
- Repeat with valid token in header and in body → expect 2xx.
- Evidence: response codes and minimal bodies.

A3. CORS
- Allowed origin preflight:
  curl -s -H "Origin:https://thehealios.com" -H "Access-Control-Request-Method:POST" \
    -H "Access-Control-Request-Headers:Content-Type" -X OPTIONS "$BASE/api/products" -i | head -20
- Disallowed origin:
  curl -s -H "Origin:https://evil.test" "$BASE/api/products" -I | grep -i access-control-allow-origin || echo "blocked"
- Evidence: header lines proving allow/deny.

A4. Cookies & Sessions
- Verify Set-Cookie attributes on login response: Secure, HttpOnly, SameSite (Lax/Strict).
  curl -s -X POST "$BASE/api/auth/login" -H "Content-Type: application/json" \
    -d '{"email":"qa+stage7@healios.test","password":"S7ecure!234"}' -i | grep -i set-cookie
- Evidence: raw header.

A5. CSP & headers
- Fetch home page headers:
  curl -s -I "$BASE" | grep -Ei "content-security-policy|x-frame-options|x-content-type-options|referrer-policy|strict-transport-security"
- Visit a console page and ensure no CSP violations in devtools; capture one CSP Evaluator result (report-only if configured).
- Evidence: header block + evaluator output.

A6. Secrets hygiene
- Build bundle inspection (no keys in client code). Provide grep evidence for known prefixes (sk_ / AKIA / ghp_ etc.) across client bundle.

────────────────────────────────────────────────────────────────────
B) COMPLIANCE

B1. Cookie consent gating
- Fresh session → verify analytics do NOT fire before consent (Network tab: no GA/Ads hits).
- Accept analytics only → confirm GA initialisation and pageview.
- Evidence:
  - Screenshots or HAR summary lines of request hosts BEFORE (none) and AFTER consent (gtm/ga hits).
  - Any localStorage/cookie keys used for consent state.

B2. Legal & retention
- Privacy: confirm explicit retention periods now present (account/orders/newsletter). Quote the exact lines.
- Terms: domain and governing‑law sections reflect intended strategy.
- Evidence: URLs + selectors or file:line.

────────────────────────────────────────────────────────────────────
C) PERFORMANCE & SEO

C1. robots/sitemap canonical domain
- curl -s "$BASE/robots.txt" | sed -n '1,80p'
- curl -s "$BASE/sitemap.xml" | head -40
- Evidence: no “wildclone.com” anywhere.

C2. Lighthouse (desktop & mobile)
- Run mobile & desktop; report LCP/CLS/INP and overall scores.
- Evidence: numeric scores + top 3 opportunities.

C3. Assets & caching
- Verify lazy loading on below‑the‑fold images; confirm large PNGs converted to WebP or appropriately compressed.
- Check Cache-Control for static assets:
  curl -s -I "$BASE/assets/any-known-asset.ext" | grep -i cache-control
- Evidence: network waterfall notes + headers.

────────────────────────────────────────────────────────────────────
D) ACCESSIBILITY (WCAG 2.1 AA)

D1. Skip link & landmarks
- Keyboard Tab from address bar: focus lands on “Skip to main content”, activates to jump to #main.
- DOM inspection shows <header>, <nav>, <main>, <footer>.
- Evidence: screenshot or snippet of the elements.

D2. Live regions & toasts
- Trigger a toast or AI assistant message; confirm aria-live polite/assertive announces content.
- Evidence: DOM snippet and screen reader log or tooling output.

D3. Media
- Planet/marketing videos: captions available; transcript linked; autoplay disabled or controllable.
- Evidence: player controls and caption track screenshot/snippet.

────────────────────────────────────────────────────────────────────
E) E‑COMMERCE FLOWS

E1. Checkout (Stripe test mode)
- Happy path (4242 4242 4242 4242): success → webhook completes order; email sent.
- Failure path (4000 0000 0000 9995 / insufficient funds): visible error, no order finalisation, idempotency respected.
- Evidence: webhook logs (event types), order status changes, email preview.

E2. Purchase & abandonment events (consent‑aware)
- After consent, verify GA4 events: begin_checkout, add_payment_info, purchase with correct amounts & currency (ZAR/GBP as configured).
- Abandonment: start checkout, leave, confirm event or internal API call triggers abandonment capture.
- Evidence: GA debugview or network payloads.

E3. VAT & fraud checks
- ZA address: verify VAT line item and totals.
- AVS/CVV checks enforced in Stripe; evidence from payment_intent.charges outcome flags.

────────────────────────────────────────────────────────────────────
OUTPUT NOW in this exact structure:
1) Summary [≤6 bullets]
2) Findings Table: [ID | Severity | Area | Evidence | Impact | Confidence%]
3) Residual Risks (if any)
4) Go/No‑Go Recommendation (one line)

Where helpful, align with the pre‑deploy checklist items for security and performance verification. 
