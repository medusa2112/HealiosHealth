You are a senior front‑end lead. Task: build a simple, elegant Healios‑styled **Login** page so users can sign in to manage orders, subscriptions, and account details.

Operate in two phases: **CHECK FIRST**, then **BUILD & FIX**. Return evidence at every step.

RULES
- Do not remove or break existing auth flows.
- Security‑first: CSRF token usage, strict cookies, no inline secrets.
- Accessibility: WCAG 2.1 AA (labels, errors, keyboard nav, focus states).
- UK English copy; minimal monochrome design consistent with Healios.
- Keep changes small and reversible; show file:line evidence.

────────────────────────────────────────────────────────
PHASE A — CHECK FIRST (read‑only)
A1. Detect stack & styling:
- Confirm React + TypeScript, Tailwind, shadcn/ui presence.
- Identify shared layout (header/footer), brand tokens (fonts, spacing), button/input components to reuse.
- Evidence: file paths for Tailwind config, shadcn init, base styles.

A2. Auth surface & security:
- List existing endpoints: /api/auth/login, /api/auth/register, /api/csrf/token, session cookie name, CSRF header name.
- Confirm CORS allowlist includes the production domain.
- Evidence: server route files + cookie attributes (Secure/HttpOnly/SameSite).

A3. Routing & guard:
- Identify the route where the login page should live: /login.
- Confirm post‑login redirect target (e.g. /account, /orders).
- Note any existing guard/HOC that protects account pages.

A4. Output a short report:
- Summary [≤6 bullets]
- Findings Table [ID | Area | Evidence (file:line) | Notes]
- Minimal changes needed to add /login without regressions.

STOP. If blockers exist, propose the smallest fixes. Otherwise continue.

────────────────────────────────────────────────────────
PHASE B — BUILD & FIX (scaffold the page)
B1. Files to create/update:
- client/src/pages/login.tsx  (or app/(public)/login/page.tsx if using app router)
- client/src/components/auth/LoginForm.tsx
- client/src/lib/validators/login.ts
- client/src/lib/auth/client.ts (fetch helpers)
- client/src/styles/forms.css (only if you don’t already have shared form helpers)

B2. UI spec (Tailwind + shadcn/ui):
- Container: centered Card with logo, title “Sign in to Healios”, supporting text “Access orders, subscriptions and account settings.”
- Fields: Email, Password, “Remember me” (checkbox).
- Actions: Primary “Sign in” button; secondary text links “Forgot password?” and “Create account”.
- Consent line (fine print): “By signing in you agree to our Terms and acknowledge our Privacy Policy.” Link both.
- States: loading spinner on submit; inline error summaries; disabled button while posting.
- Mobile‑first, max‑w-sm Card, generous spacing, focus-visible rings.

B3. Validation & accessibility:
- Zod schema: email (valid email), password (min length 8). Show errors below fields with aria‑describedby.
- Form labels explicitly associated with inputs. Keyboard‑first nav works.

B4. Security wiring:
- On mount, GET /api/csrf/token and store token in React state.
- Submit POST /api/auth/login with JSON body and CSRF token header (or hidden field as required by backend).
- Handle 401/403/422 gracefully (show message, keep focus in form).
- On success, redirect to /account (or the route detected in Phase A).

B5. Copy & micro‑interactions (UK):
- Title: “Sign in to Healios”
- Button: “Sign in”
- Errors: “We couldn’t sign you in with those details.” / Field‑level messages from Zod.
- Forgot: “Forgot your password?”
- Create: “Create an account”

B6. Styling cues (monochrome/Healios):
- Neutral background, white Card, black text.
- Button corners rounded‑2xl, subtle shadow, hover: scale‑[0.99].
- Inputs with ring‑1 focus, no gaudy colours. Respect existing design tokens if present.

────────────────────────────────────────────────────────
PHASE C — IMPLEMENTATION DETAILS (what to generate)

C1. LoginForm.tsx (sketch; generate full code)
- Uses React Hook Form + @hookform/resolvers/zod + Zod schema.
- Imports shadcn/ui: Card, CardHeader, CardContent, CardFooter, Button, Input, Label, Checkbox.
- Fetches CSRF token on mount. On submit:
  await fetch('/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type':'application/json', 'x-csrf-token': csrf },
    credentials: 'include',
    body: JSON.stringify({ email, password, remember })
  })
- Success → router.push(detectedAccountRoute)
- Error → set form errors; focus first invalid input.

C2. validators/login.ts
- export const LoginSchema = z.object({
    email: z.string().email('Enter a valid email address'),
    password: z.string().min(8,'Password must be at least 8 characters'),
    remember: z.boolean().optional()
  });

C3. Route page (login.tsx)
- Uses <LoginForm/> inside a centered container.
- SEO: <title>Login | Healios</title>, canonical set to /login.
- Skip‑link target id="main" respected.

────────────────────────────────────────────────────────
PHASE D — VERIFICATION (auto‑run after build)
D1. UI smoke:
- Load /login desktop + mobile; check focus order, labels, Enter‑to‑submit, disabled while posting.

D2. Security:
- Network: verify CSRF token requested; login sends x‑csrf‑token; Set‑Cookie has Secure, HttpOnly, SameSite.
- Wrong creds → 401/403 with JSON; correct creds → 200 and redirect.

D3. A11y:
- Axe run: no critical violations, labels present, error text announced.

D4. Analytics & consent:
- Ensure no analytics fire pre‑consent on /login; banner behaviour unchanged.

D5. Output:
- Summary [≤6 bullets]
- Findings Table with file:line for generated code
- Screenshots or header snippets for CSRF/cookies
- If anything fails, propose the smallest fix and re‑run D1–D4.

Begin with **PHASE A** and output only the Phase A report first. If clear, proceed with Phase B/C/D and return the final verification report.
