Prompt 8 of X: Guest Checkout Support + Post-Purchase Invite to Register
Objective: Enable guest users to complete a Stripe checkout without logging in, while capturing their order, tracking them via email, and inviting them to register after purchase to access the customer portal.

✅ PHASE 1: SYSTEM SCAN (PRE-IMPLEMENTATION GUEST CHECKS)
Before building, scan for:

❌ Checkout guardrails that block unauthenticated users

Any logic that requires login for checkout must be removed or rewritten to allow guest flow

❌ Session-only cart logic

Confirm carts are sync'd via session_token and not tied exclusively to a user_id

✅ orders table must support:

user_id = null for guests

stripe_session_id and customer_email from Stripe metadata

✅ /auth/register route exists (or will be added) to convert a guest post-purchase

🧱 PHASE 2: GUEST CHECKOUT LOGIC (FRONTEND + BACKEND)
1. 💳 Stripe Checkout Logic (Server-Side)
Update your session creation function to accept guest user flow:

ts
Copy
Edit
const user = req.user || null;
const cart = await getCartFromSessionToken(req.body.session_token); // Must exist

const session = await stripe.checkout.sessions.create({
  payment_method_types: ["card"],
  line_items: cart.items.map(item => ({
    price_data: {
      currency: "usd",
      product_data: { name: item.name },
      unit_amount: item.price * 100,
    },
    quantity: item.quantity,
  })),
  mode: "payment",
  metadata: {
    cart_id: cart.id,
    user_id: user?.id ?? null,
  },
  customer_email: req.body.email, // For guests
  success_url: `https://yourdomain.com/checkout-success?session_id={CHECKOUT_SESSION_ID}`,
  cancel_url: `https://yourdomain.com/cart`,
});
2. 🧠 Update Stripe Webhook /routes/stripe.ts
Update your webhook handler to create a guest order:

ts
Copy
Edit
if (event.type === "checkout.session.completed") {
  const session = event.data.object as Stripe.Checkout.Session;

  await db.insert(orders).values({
    user_id: session.metadata?.user_id ?? null,
    stripe_session_id: session.id,
    status: "paid",
    total_amount: session.amount_total! / 100,
    refund_status: "none",
    dispute_status: "none",
    customer_email: session.customer_email,
  });

  // Update cart as converted (see Prompt 7)
}
✅ Save guest email even if user isn't registered.

3. 🛎️ Post-Checkout Guest CTA (Frontend)
At /checkout-success.tsx or wherever the success page is rendered:

tsx
Copy
Edit
import { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";

export default function CheckoutSuccess() {
  const [searchParams] = useSearchParams();
  const sessionId = searchParams.get("session_id");
  const [isGuest, setIsGuest] = useState(false);

  useEffect(() => {
    // call /auth/me or check local storage
    const isLoggedIn = checkIfUserLoggedIn(); // you define this
    setIsGuest(!isLoggedIn);
  }, []);

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">🎉 Thank you for your order!</h1>
      {isGuest ? (
        <div className="border p-4 rounded bg-yellow-50">
          <p className="mb-2">Want to track your orders and save your address?</p>
          <a href="/auth/register?fromCheckout=true" className="btn btn-primary">Create Account</a>
        </div>
      ) : (
        <p>Your order details have been saved to your account.</p>
      )}
    </div>
  );
}
🧾 PHASE 3: Upgrade /auth/register to Convert Guests
On register:

Check if email exists in any orders table rows

If so, re-assign user_id to the new registered user on those orders:

ts
Copy
Edit
const existingOrders = await db.select().from(orders).where(eq(orders.customer_email, email));
if (existingOrders.length > 0) {
  await db.update(orders).set({ user_id: newUser.id }).where(eq(orders.customer_email, email));
}
Same logic applies to:

Saved addresses (future)

Reorders

Guest-to-customer upgrade path

🧪 PHASE 4: TEST CASES + FAILURE ZONES
Test	Expected
Guest completes checkout	Order saved with user_id = null, email is stored
Guest hits success page	Invite to register is shown
Guest registers with same email	Orders reassigned to new user
Logged-in user checks out	Flows unaffected
Abandoned guest cart	Still saved and trackable

📦 OUTPUT FROM THIS PROMPT
✅ Guest checkout enabled with email capture

✅ Orders stored and visible to admin (no auth required)

✅ Post-checkout guest invite logic rendered based on auth state

✅ Reassignment logic on registration to stitch guest → user account

