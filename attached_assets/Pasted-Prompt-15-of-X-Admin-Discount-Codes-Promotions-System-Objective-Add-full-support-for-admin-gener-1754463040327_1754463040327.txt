Prompt 15 of X: Admin Discount Codes + Promotions System
Objective: Add full support for admin-generated discount codes (percentage or fixed), validated server-side at checkout, tracked per use, and integrated with Stripe for final charge accuracy.

✅ PHASE 1: SYSTEM SCAN (DISCOUNT CONFLICT CHECK)
Scan the codebase for:

❌ Hardcoded discount values in Stripe session or cart logic

❌ Frontend-only discount inputs not validated server-side

✅ Stripe integration via stripe.checkout.sessions.create(...) (we’ll inject discounts into this flow)

🧱 PHASE 2: DATABASE — DISCOUNT MODEL
In /db/schema.ts:

ts
Copy
Edit
export const discount_codes = pgTable("discount_codes", {
  id: uuid("id").defaultRandom().primaryKey(),
  code: varchar("code", { length: 64 }).unique().notNull(), // e.g. "WELCOME10"
  type: varchar("type", { length: 16 }).notNull(), // "percent" | "fixed"
  value: numeric("value", { precision: 10, scale: 2 }).notNull(), // 10 = 10% or $10
  usage_limit: integer("usage_limit"), // null = unlimited
  usage_count: integer("usage_count").default(0),
  expires_at: timestamp("expires_at"),
  created_at: timestamp("created_at").defaultNow(),
});
Run:

bash
Copy
Edit
npx drizzle-kit push
🛠️ PHASE 3: ADMIN DISCOUNT CODE MANAGEMENT
Backend: /routes/admin/discounts.ts
ts
Copy
Edit
import express from "express";
import { db } from "../../db";
import { discount_codes } from "../../db/schema";
import { protectRoute } from "../../lib/auth";
import { eq } from "drizzle-orm";

const router = express.Router();
router.use(protectRoute(["admin"]));

router.get("/", async (_, res) => {
  const all = await db.select().from(discount_codes);
  res.json(all);
});

router.post("/", async (req, res) => {
  const { code, type, value, usage_limit, expires_at } = req.body;
  const existing = await db.select().from(discount_codes).where(eq(discount_codes.code, code));
  if (existing.length > 0) return res.status(400).json({ error: "Code already exists" });

  const inserted = await db.insert(discount_codes).values({
    code, type, value, usage_limit, expires_at: expires_at ? new Date(expires_at) : null,
  }).returning();
  res.status(201).json(inserted[0]);
});
Mount:

ts
Copy
Edit
import adminDiscounts from "./routes/admin/discounts";
app.use("/admin/discounts", adminDiscounts);
💻 Admin UI — /admin/discounts.tsx
Simple form + list:

tsx
Copy
Edit
<form onSubmit={handleCreate}>
  <input placeholder="Code (e.g. WELCOME10)" className="input" />
  <select className="input">
    <option value="percent">%</option>
    <option value="fixed">$</option>
  </select>
  <input type="number" placeholder="Value" className="input" />
  <input type="number" placeholder="Usage Limit (optional)" className="input" />
  <input type="date" className="input" />
  <button className="btn btn-primary">Create</button>
</form>
💳 PHASE 4: CHECKOUT FLOW — APPLY DISCOUNT
1. Frontend cart page:
Add discount input:

tsx
Copy
Edit
<input type="text" placeholder="Enter promo code" onChange={e => setDiscountCode(e.target.value)} className="input" />
Include in Stripe session call:

ts
Copy
Edit
fetch("/checkout", {
  method: "POST",
  body: JSON.stringify({ items, discount_code: discountCode }),
});
2. Backend POST /checkout logic
Validate the code before creating the Stripe session:

ts
Copy
Edit
let discountAmount = 0;

if (body.discount_code) {
  const [code] = await db.select().from(discount_codes).where(eq(discount_codes.code, body.discount_code));
  if (!code) throw new Error("Invalid discount");

  const now = new Date();
  if (code.expires_at && now > new Date(code.expires_at)) throw new Error("Code expired");
  if (code.usage_limit && code.usage_count >= code.usage_limit) throw new Error("Code usage limit reached");

  // Calculate
  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
  discountAmount = code.type === "percent" ? (subtotal * Number(code.value)) / 100 : Number(code.value);

  // Increment usage (we don't roll back if payment fails — optional future fix)
  await db.update(discount_codes).set({ usage_count: code.usage_count + 1 }).where(eq(discount_codes.id, code.id));
}
Then apply in Stripe session creation:

ts
Copy
Edit
line_items: [...],
discounts: discountAmount > 0 ? [{
  coupon: await createStripeCoupon(discountAmount),
}] : undefined,
Where createStripeCoupon is a helper that calls:

ts
Copy
Edit
stripe.coupons.create({ amount_off: discountAmount * 100, currency: "usd" });
❗ Must be created before checkout session. You may cache temporary coupons (optional).

🔁 PHASE 5: INTEGRITY + EDGE CASES
Case	Result
Valid code used	✅ Discount applied and tracked
Expired code	❌ Rejected with clear error
Usage limit hit	❌ Rejected
Code re-used by same user	✅ If usage limit not reached
Checkout fails	❗ Usage count still increased (future: handle via webhook if needed)

📦 OUTPUT FROM THIS PROMPT
discount_codes table with full metadata

Admin panel to create and manage codes

Discount input field on cart/checkout page

Stripe checkout applies validated discount

Usage is tracked

Supports % off, $ off, limits, expiry