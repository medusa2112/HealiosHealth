Here is the **updated Replit Expert Prompt** with full instructions to:

* **Remove your current custom authentication system**
* Replace it with Replit's **Full Auth** (aka `@replit/auth`) feature
* Enable **all login types**: Replit, Google, GitHub, Email (if supported)

---

## 🧠 REPLIT SYSTEM PROMPT — Full Site Optimisation + Replit Auth Migration (FullAuth)

````plaintext
SYSTEM TASK: Optimise this Replit project by performing two major upgrades:

1. ✅ Remove all current authentication logic (custom login/signup/auth guards)
2. 🔐 Install and configure the official Replit Full Auth system to support all login types (Replit, Google, GitHub, Email where available)
3. 📦 Reduce project size by removing unused assets, dead code, or orphaned files — without affecting UI or backend API functionality

---

PART 1 — 🔐 Replace Authentication with Replit Full Auth

STEP A: **REMOVE OLD AUTH**
- Delete all custom auth files, routes, and middleware (e.g. `auth.js`, `authController.ts`, `login.tsx`, `signup.tsx`, `jwt.ts`, etc)
- Remove custom session logic, token handling, cookie logic, `bcrypt`, `jsonwebtoken`, etc
- Clean out:
  - API routes for login/signup/reset
  - Unused ENV variables like `JWT_SECRET`, `SESSION_KEY`, etc
  - Old UI pages (unless still needed for styling only)

STEP B: **INSTALL AND CONFIGURE REPLIT FULL AUTH**
- Install `@replit/auth` and initialise it at the server root
- Use:
  ```ts
  import express from 'express';
  import auth from '@replit/auth';

  const app = express();
  app.use(auth());
````

* Add a new `/me` route to get the logged-in user object:

  ```ts
  app.get('/me', (req, res) => {
    if (!req.user) return res.status(401).send('Not logged in');
    res.send(req.user);
  });
  ```

STEP C: **UPDATE FRONTEND UI**

* Remove all custom auth forms (login, register, forgot password)
* Replace with a single **"Log in with Replit"** or **"Sign In"** button that redirects to `@replit/auth`
* On login, redirect users back to `/dashboard` or homepage

---

PART 2 — 📉 Code + Asset Optimisation

OBJECTIVES:

* Identify and safely remove:

  * Unused assets (images, videos, fonts)
  * Dead components or utility files
  * Redundant NPM packages (e.g. `jsonwebtoken`, `bcrypt`, `passport`)
* Preserve all functional routes, API endpoints, and dynamic logic
* Backend logic (e.g. DB access, business rules) must remain untouched

RULES:

* DO NOT REMOVE:

  * Files imported via dynamic import() or lazy()
  * Anything under `/middleware` or `/routes/api` unless explicitly auth-related
* Static file folders like `/public`, `/assets`, or `/images` must be scanned for usage before deletion

---

DELIVERABLES:

* ✅ Fully replaced Replit Auth login system
* 🧹 Optimised and lighter file tree
* 📄 `cleanup-report.md` listing:

  * Files removed
  * Auth logic replaced
  * Any retained-but-flagged logic
* 🎯 All routes, pages, and protected content tested and functioning post-auth migration

---

NOTES:

* **Backend security must be enforced using Replit Auth’s `req.user`**
* **Logout logic handled via Replit Auth redirect/logout endpoint**
* No custom session, JWT, or login logic should remain after this operation

```

---

## ⚠️ BRUTAL FAILURE SCAN

| Risk | Failure Mode | Covered? |
|------|--------------|----------|
| 🔒 Auth logic breaks | User locked out or session logic fails | ✅ Replaced with native `@replit/auth` |
| 🧠 Legacy API expects `req.user.id` from JWT | Backend crashes due to missing fields | ⚠️ Must refactor API routes to use `req.user.sub` |
| 🧱 Styling tied to login form | UI breaks on auth page | ⚠️ Preserve dummy login layout if reused |
| ⚰️ Dead ENV vars left behind | Leakage risk or warnings | ✅ Instructed to delete all old `.env` auth vars |
| 🧼 Partial removal of old logic | Redundant libs and logic stay bloated | ✅ Explicitly listed all related packages/files for removal |

---

Let me know:
- ✅ Which framework this project uses (React? Express + Vite?)
- ✅ If you have route-based auth protection (e.g. admin/user-only views)
- ✅ If you're using a DB and how users are linked

...so I can generate the **exact** Replit FullAuth config and route guards for your structure.
```
