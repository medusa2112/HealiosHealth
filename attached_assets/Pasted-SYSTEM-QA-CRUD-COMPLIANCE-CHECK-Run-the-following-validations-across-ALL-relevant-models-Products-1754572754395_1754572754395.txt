SYSTEM QA: CRUD COMPLIANCE CHECK

Run the following validations across ALL relevant models (Products, Orders, Users, etc.) and log the output in a structured QA format:

---

1. ‚úÖ CREATE TESTS

- [ ] Attempt to create an entry with missing required fields (e.g. name, price). Does the system block it with specific error messages?
- [ ] Try submitting duplicate values for unique fields (e.g. product SKU, email). Does it prevent insertion and return a unique constraint error?
- [ ] Does the UI clearly show which fields are required and why submission failed?

LOG FORMAT:
- Missing field check: PASS/FAIL ‚Äì [Error Message]
- Duplicate entry check: PASS/FAIL ‚Äì [Error Message]
- UI error clarity: PASS/FAIL ‚Äì [Visual evidence]

---

2. ‚úÖ READ TESTS

- [ ] Does the UI display **exactly what‚Äôs in the DB** (no stale cache)?
- [ ] Filter results (e.g. category = ‚ÄúSupplements‚Äù). Do DB query results match UI?
- [ ] Trigger pagination (10+ pages). Does pagination logic skip or repeat rows?

LOG FORMAT:
- DB/UI sync check: PASS/FAIL ‚Äì [Field examples]
- Filter accuracy: PASS/FAIL ‚Äì [Filter + DB result log]
- Pagination consistency: PASS/FAIL ‚Äì [Item count per page + page transitions]

---

3. ‚úÖ UPDATE TESTS

- [ ] Edit a single field (e.g. name) and confirm **other fields remain unchanged** in the DB.
- [ ] Attempt update with partial payload (e.g. no price field). Does it only modify intended field(s)?
- [ ] Are update timestamps and logs being recorded correctly?

LOG FORMAT:
- Partial update integrity: PASS/FAIL ‚Äì [Before/After payload]
- Field overwrite protection: PASS/FAIL ‚Äì [Fields checked]
- Audit trail check: PASS/FAIL ‚Äì [Updated_at/log entry example]

---

4. ‚úÖ DELETE TESTS

- [ ] Delete an entry and check: is it **soft deleted** (e.g. `is_active = false`) or fully removed from the DB?
- [ ] Try to access the deleted record via ID. What response is returned?
- [ ] If soft delete, is there a recovery mechanism or undelete flow?
- [ ] If hard delete, confirm all related foreign key constraints are either updated or cascaded properly.

LOG FORMAT:
- Delete type check: SOFT/HARD ‚Äì [DB evidence]
- Access after delete: PASS/FAIL ‚Äì [Error message or response]
- Recovery available: YES/NO ‚Äì [Button, route or admin tool]
- FK cascade check: PASS/FAIL ‚Äì [References cleaned or broken]

---

üîç Final Output: Export all findings as JSON or structured markdown with confidence scores (0‚Äì100) per CRUD area. Example format:

```json
{
  "create": {
    "field_validation": "pass",
    "duplicate_check": "fail",
    "confidence_score": 84
  },
  "read": {
    "db_sync": "pass",
    "filtering": "pass",
    "pagination": "fail",
    "confidence_score": 79
  },
  ...
}
