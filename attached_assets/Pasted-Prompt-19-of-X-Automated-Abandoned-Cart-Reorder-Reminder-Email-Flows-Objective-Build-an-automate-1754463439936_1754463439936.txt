Prompt 19 of X: Automated Abandoned Cart + Reorder Reminder Email Flows
Objective: Build an automated system that sends:

🛒 Abandoned cart emails after cart inactivity (e.g. 1–24h)

🔁 Reorder reminders for products likely to run out (e.g. after 25–30 days)

This system increases conversion and retention through intelligent re-engagement.

✅ PHASE 1: DATA SOURCE CONFIRMATION
Flow	Source Table	Trigger Field
Abandoned cart	carts	converted_to_order = false, last_updated < X
Reorder reminder	orders, order_items, product_variants	created_at, product_variant_id, interval_days or reorder prediction

Confirm:

✅ users.email exists

✅ You’ve stored interval_days or assumed it by product type (e.g. supplement refills ≈ 30d)

✅ sendEmail(to, type, data) function exists and supports custom templates (Prompt 5)

🧠 PHASE 2: LOGIC FLOW — TIMING + DEDUPLICATION
🛒 Abandoned Cart
Time Since Last Updated	Action
1 hour	Soft email: "Still interested?"
24 hours	Reminder with incentive (optional)
3+ days	Stop emailing or send final CTA

🔁 Reorder Reminder
Time Since Last Order	Action
interval_days - 5	Reminder email
interval_days + 1	Final follow-up
Already reordered	Suppress

🛠️ PHASE 3: ADD email_events TABLE FOR DEDUP TRACKING
ts
Copy
Edit
export const email_events = pgTable("email_events", {
  id: uuid("id").defaultRandom().primaryKey(),
  user_id: uuid("user_id"),
  email_type: varchar("email_type", { length: 64 }), // "abandoned_cart", "reorder"
  related_id: uuid("related_id"), // cart_id or order_id
  sent_at: timestamp("sent_at").defaultNow(),
});
Run:

bash
Copy
Edit
npx drizzle-kit push
⚙️ PHASE 4: DAILY JOB — ABANDONED CART REMINDERS
Create /jobs/emailAbandonedCarts.ts (cronable)

ts
Copy
Edit
const cutoff1h = new Date(Date.now() - 60 * 60 * 1000);
const cutoff24h = new Date(Date.now() - 24 * 60 * 60 * 1000);

const carts = await db.select().from(carts)
  .where(and(
    eq(carts.converted_to_order, false),
    or(
      between(carts.last_updated, cutoff24h, cutoff1h),
      lt(carts.last_updated, cutoff24h)
    )
  ));

for (const cart of carts) {
  const user = await db.select().from(users).where(eq(users.id, cart.user_id ?? "GUEST")).limit(1);

  const alreadySent = await db.select().from(email_events).where(and(
    eq(email_events.related_id, cart.id),
    eq(email_events.email_type, "abandoned_cart")
  ));
  if (alreadySent.length > 0) continue;

  await sendEmail(user.email, "abandoned_cart", { cart });

  await db.insert(email_events).values({
    user_id: user.id,
    email_type: "abandoned_cart",
    related_id: cart.id,
  });
}
⚙️ PHASE 5: DAILY JOB — REORDER REMINDERS
ts
Copy
Edit
const orders = await db.select().from(orders).where(
  gt(orders.created_at, new Date(Date.now() - 45 * 24 * 60 * 60 * 1000)) // last 45 days
);

for (const order of orders) {
  const orderAge = daysBetween(order.created_at, now);
  const user = await db.select().from(users).where(eq(users.id, order.user_id)).limit(1);

  const items = await db.select().from(order_items).where(eq(order_items.order_id, order.id));
  for (const item of items) {
    const variant = await db.select().from(product_variants).where(eq(product_variants.id, item.product_id));
    const interval = variant.refill_interval_days ?? 30;
    if (orderAge < interval - 5 || orderAge > interval + 5) continue;

    const alreadySent = await db.select().from(email_events).where(and(
      eq(email_events.related_id, order.id),
      eq(email_events.email_type, "reorder")
    ));
    if (alreadySent.length > 0) continue;

    await sendEmail(user.email, "reorder", {
      product: variant.name,
      quantity: item.quantity,
    });

    await db.insert(email_events).values({
      user_id: user.id,
      email_type: "reorder",
      related_id: order.id,
    });
  }
}
📬 PHASE 6: EMAIL TEMPLATES
Handled via sendEmail():

abandoned_cart
Subject: Still thinking it over?
Body: You've left something in your cart.
CTA: Resume Checkout

reorder
Subject: Running low on {product}?
Body: Your {product} may be running out. Refill now.
CTA: Reorder

🧪 PHASE 7: TEST CASES
Scenario	Result
User adds item to cart, abandons	Email after 1hr, again at 24hr
Cart is converted to order	No further emails
Order placed 30d ago	Reorder reminder sent at day 25
Already reordered same product	No reminder
Guest cart abandoned	Skipped (no email)