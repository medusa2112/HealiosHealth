Prompt 13 of X: Reorder Email + Funnel Analytics Logging
Objective: Trigger a transactional email when a user reorders a past product and log each reorder attempt (start, success, fail) to power reorder funnel insights and future retargeting.

✅ PHASE 1: SYSTEM SCAN (FUNNEL READINESS CHECK)
Check for:

✅ orders, order_items, and /portal/orders/:id/reorder endpoint exist
(From Prompt 4 — should be implemented already)

❌ No log of funnel actions

Reorders are executed but not tracked: no “user attempted to reorder X” logs

❌ Email not triggered on reorder

From Prompt 5, sendEmail(..., "reorder") not yet injected

✅ users table includes email and id

🧱 PHASE 2: ADD reorder_logs TABLE TO SCHEMA
In /db/schema.ts:

ts
Copy
Edit
export const reorder_logs = pgTable("reorder_logs", {
  id: uuid("id").defaultRandom().primaryKey(),
  user_id: uuid("user_id").notNull(),
  original_order_id: uuid("original_order_id").notNull(),
  status: varchar("status", { length: 32 }).notNull(), // started | success | failed
  timestamp: timestamp("timestamp").defaultNow(),
  metadata: json("metadata"), // optional
});
Run:

bash
Copy
Edit
npx drizzle-kit push
🛠️ PHASE 3: LOG REORDER ACTIONS + TRIGGER EMAIL
In /routes/portal.ts, update the /orders/:id/reorder endpoint:

ts
Copy
Edit
import { reorder_logs } from "../db/schema";
import { sendEmail } from "../lib/email";

router.post("/orders/:id/reorder", async (req, res) => {
  const userId = req.user.id;
  const orderId = req.params.id;

  // Log attempt
  await db.insert(reorder_logs).values({
    user_id: userId,
    original_order_id: orderId,
    status: "started",
  });

  try {
    const items = await db.select().from(order_items).where(eq(order_items.order_id, orderId));
    const total = items.reduce((sum, item) => sum + item.unit_price * item.quantity, 0);

    const newSession = await createCheckoutSession(items, userId); // Assume this exists

    // Log success
    await db.insert(reorder_logs).values({
      user_id: userId,
      original_order_id: orderId,
      status: "success",
      metadata: { total },
    });

    // Send transactional email
    await sendEmail(req.user.email, "reorder", {
      amount: total,
      id: newSession.id,
    });

    res.json({ url: newSession.url });
  } catch (err) {
    console.error("Reorder failed", err);
    await db.insert(reorder_logs).values({
      user_id: userId,
      original_order_id: orderId,
      status: "failed",
      metadata: { error: err.message },
    });
    res.status(500).json({ error: "Failed to process reorder" });
  }
});
📬 PHASE 4: UPDATE sendEmail.ts FOR "reorder"
Already covered in Prompt 5 — just ensure this still works:

ts
Copy
Edit
export async function sendEmail(to: string, type: EmailType, data: any) {
  ...
  reorder: `Your reorder has been confirmed. You’ll receive updates soon.`,
  ...
}
📊 PHASE 5: ADMIN UI — /admin/reorders.tsx
tsx
Copy
Edit
import { useEffect, useState } from "react";

export default function AdminReorders() {
  const [logs, setLogs] = useState([]);

  useEffect(() => {
    fetch("/admin/reorders").then(res => res.json()).then(setLogs);
  }, []);

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-xl font-bold">Reorder Funnel Logs</h1>

      {logs.map((log: any) => (
        <div key={log.id} className="border p-4 rounded">
          <div>👤 User ID: {log.user_id}</div>
          <div>🛍️ Original Order: {log.original_order_id}</div>
          <div>📊 Status: <strong>{log.status}</strong></div>
          <div>📅 Time: {new Date(log.timestamp).toLocaleString()}</div>
          {log.metadata && <pre className="text-xs bg-gray-100 p-2 rounded">{JSON.stringify(log.metadata, null, 2)}</pre>}
        </div>
      ))}
    </div>
  );
}
Backend endpoint:

ts
Copy
Edit
router.get("/admin/reorders", protectRoute(["admin"]), async (req, res) => {
  const logs = await db.select().from(reorder_logs).orderBy(desc(reorder_logs.timestamp)).limit(100);
  res.json(logs);
});
🔁 PHASE 6: FUNNEL SUCCESS TRACKING
Stage	Action Logged
User clicks "Reorder"	✅ started
Stripe session created	✅ success
Error in flow	✅ failed
Email sent on success	✅ Confirmed

📦 OUTPUT FROM THIS PROMPT
Reorder funnel logging: started, success, failed

Transactional email on success

Admin UI dashboard to monitor reorder activity

Error details logged if reorder fails

Total reorder value metadata available